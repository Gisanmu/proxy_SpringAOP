<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/aop
          http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--配置Spring的IOC-->

    <!--可以在接口实现类使用@Service注解进行注入-->
    <bean class="pers.sanmu.AOP.service.impl.AccountImpl" id="accountService"></bean>

    <!--spring中基于XML的AOP配置步骤
        1 把通知Bean也交给Spring管理
        2 使用aop:config标签表面开始AOP配置
        3 使用aop:aspect标签表面配置切面
        4 在aop:aspect标签的内部使用对应标签来配置通知的类型
            aop：before表示配置前置通知
                metho属性：用于指定Logger类中哪个方法是前置通知
        5 pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强
                写法：访问修饰符，返回值，包名.包名....类名.方法名（参数列表）
                访问修饰符可以省略，
                返回值可以使用通配符，表示任意返回值
                全通配写法：
                    * *..*.*(..)
        -->
<!--可以使用@Comment注解进行注入-->
    <bean id="logger" class="pers.sanmu.AOP.utils.Logger"></bean>

    <!--配置AOP-->
    <aop:config>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知类型，并且建立通知方法和切入点方法的关联-->

            <!--前置通知-->
            <aop:before method="beforePrintLog" pointcut="execution(public void pers.sanmu.AOP.service.impl.AccountImpl.saveAccount())"></aop:before>
            <!--后置通知-->
            <aop:after-returning method="afterReturningPrintLog" pointcut="execution(public void pers.sanmu.AOP.service.impl.AccountImpl.saveAccount())"></aop:after-returning>
            <!--异常通知-->
            <aop:after-throwing method="afterThrowingPrintLog" pointcut="execution(public void pers.sanmu.AOP.service.impl.AccountImpl.saveAccount())"></aop:after-throwing>
            <!--最终通知 -->
            <aop:after method="afterPrintLog" pointcut="execution(public void pers.sanmu.AOP.service.impl.AccountImpl.saveAccount())"></aop:after>
        </aop:aspect>
    </aop:config>
</beans>
pro
